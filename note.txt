450 elements, 8 vr, 7 full, one with 2 elements
vector data memory
0 - - - - - - - - ... - - - - 
1 - - - - - - - - ... - - - - 
2 - - - - - - - - ... - - - - 
3 - - - - - - - - ... - - - - 
4 - - - - - - - - ... - - - - 
5 - - - - - - - - ... - - - - 
6 - - - - - - - - ... - - - - 
7 - -

Assume SR1 = address that we want to load
MVL = 64
LV VR1 SR1 % SR1 = 0
LV VR2 SR2 % SR2 = 1
LV VR3 SR3 % SR3 = 2
LV VR4 SR4 % SR4 = 3
LV VR5 SR5 % SR5 = 4
LV VR6 SR6 % SR6 = 5
XOR SR1 SR1 SR1 % SR1 = 0
ADDi SR1 SR1 2 
MTCL MVL SR1
LV VR7 SR7 % SR7 = 0 MVL should be 2

𝐷𝑃 = 𝑎[0] * 𝑏[0] + 𝑎[1] * 𝑏[1] + . . . . + 𝑎[449] * 𝑏[449]

MVL = 64
LV VR2 SR2= starting addr of a = 0
LV VR3 SR3= starting addr of b = 450
MUL VR1 VR2 VR3
VR1 = [ 𝑎[0] * 𝑏[0], 𝑎[1] * 𝑏[1], . . . ., 𝑎[63] * 𝑏[63] ]




VR2 = 𝑎[64] * 𝑏[64] + 𝑎[65] * 𝑏[65] + . . . . + 𝑎[127] * 𝑏[127]


TODO: put the DP value into VDMEM at address 2048
Given:
SR4 = 450 which is the length of a and b
SR2 = starting addr of vector a
SR3 = starting addr of vector b






memory add 0: a start: 1
1
1
1
...
memory add 449:  a end: 1
memory add 450: b start: 2
2
2
2
...
memory add 900: b end: 2


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class RegisterFile:
when it is a vector register file: self.registers = [[1,2,3,...],[3,4,5,...],[8,9,0,..],...]
when it is a scalar register file: self.registers = [[1],[3],[8],...]

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Examples on mask registers
VR1 = [2,4,5,6,34,23,412,43,45,345,2]
VR2 = [2,4,5,6,34,23,412,43,45,345,2]
SEQVV VR1 VR2 -> VMR = [1,1,1,1,1,1,1,1,1,1,1]
SNEVV VR1 VR2 -> VMR = [0,0,0,0,0,0,0,0,0,0,0]
SGTVV
SLTVV
SGEVV
SLEVV

VR1 = [2,4,5,6,34,23,412,43,45,345,2]
SR1 = 4
SEQVS VR1 SR1 -> VMR = [0,1,0,0,0,0,0,0,0,0,0]
SNEVS
SGTVS
SLTVS
SGEVS
SLEVS